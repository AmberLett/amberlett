#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Trie {
    int count;
    struct Trie *next[26];
};

void insert(struct Trie **ppTrie, char *word) {
    struct Trie *pTrie = *ppTrie;
    for (int i = 0; i < strlen(word); i++) {
        int index = word[i] - 'a';
        if (pTrie->next[index] == NULL) {
            pTrie->next[index] = (struct Trie*)malloc(sizeof(struct Trie));
            memset(pTrie->next[index], 0, sizeof(struct Trie));
        }
        pTrie = pTrie->next[index];
    }
    pTrie->count++;
}

int numberOfOccurances(struct Trie *pTrie, char *word) {
    for (int i = 0; i < strlen(word); i++) {
        int index = word[i] - 'a';
        if (pTrie->next[index] == NULL)
            return 0;
        pTrie = pTrie->next[index];
    }
    return pTrie->count;
}

struct Trie *deallocateTrie(struct Trie *pTrie) {
    if (pTrie == NULL)
        return NULL;
    for (int i = 0; i < 26; i++)
        deallocateTrie(pTrie->next[i]);
    free(pTrie);
    return NULL;
}

int main(void) {
    struct Trie *trie = (struct Trie*)malloc(sizeof(struct Trie));
    memset(trie, 0, sizeof(struct Trie));
    
    //read the number of the words in the dictionary
    // parse line by line, and insert each word to the trie data structure
    char *pWords[] = {"notaword", "ucf", "no", "note", "corg"};
    for (int i = 0; i < 5; i++) {
        insert(&trie, pWords[i]);
        printf("\t%s : %d\n", pWords[i], numberOfOccurances(trie, pWords[i]));
    }
    
    trie = deallocateTrie(trie);
    if (trie != NULL)
        printf("There is an error in this program! \n");
    return 0;
}
